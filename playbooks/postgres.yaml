- hosts: dbservers
  become: yes
  become_user: root

  pre_tasks:
    - name: Install the PostgreSQL package  #Install PostgreSQL client and contrib packages
      apt:
        name: ["postgresql-contrib", "postgresql-client"]
        state: present
        update_cache: yes

    - name: install pip3  # Install Python pip3 package manager
      apt:
        name: ["python3-pip"]
        state: present
        update_cache: yes

    - name: "Install Python packages"  #Install psycopg2-binary package for PostgreSQL
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - psycopg2-binary

  tasks:
    - name: check if postgres is initialized  #Check if PostgreSQL is initialized
      ansible.builtin.stat:
        path: /var/lib/postgresql/14/main
      register: postgres_data

    - name: debug stat  #Debug the state of PostgreSQL data directory
      ansible.builtin.debug:
        msg: "postgres data debug {{postgres_data}}"

    - name: "Initialize PostgreSQL"  #Initialize PostgreSQL if not already initialized
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists

    - name: "Start and enable services"  #Start and enable PostgreSQL service
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - postgresql

    - name: "Create app database"  #Create application database
      postgresql_db:
        state: present
        name: "{{ db.name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"  #Create database user with specified credentials
      postgresql_user:
        state: present
        name: "{{ db.user }}"
        password: "{{ db.password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"  #Grant all privileges on the database to the user
      postgresql_privs:
        type: database
        database: "{{ db.name }}"
        roles: "{{ db.user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"  #Configure pg_hba.conf for md5 authentication
      postgresql_pg_hba:
        dest: "/etc/postgresql/14/main/pg_hba.conf"
        contype: host
        databases: all
        source: 0.0.0.0/0
        method: md5
        users: "{{ db.user }}"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: "Allow connections from all"  #Update postgresql.conf to listen on all addresses
      lineinfile:
        path: "/etc/postgresql/14/main/postgresql.conf"
        line: "listen_addresses = '*'"
        regexp: "^#listen_addresses = 'localhost'"
        state: present
      become: yes
      become_user: postgres
      notify: restart postgres

  handlers:
    - name: restart postgres  #Restart PostgreSQL service
      service: name=postgresql state=restarted
